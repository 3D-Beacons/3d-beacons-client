# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ResultTemplate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, last_updated: str=None, provider: str=None, experimental_method: str=None, resolution: float=None, preferred_assembly_id: float=None):  # noqa: E501
        """ResultTemplate - a model defined in Swagger

        :param last_updated: The last_updated of this ResultTemplate.  # noqa: E501
        :type last_updated: str
        :param provider: The provider of this ResultTemplate.  # noqa: E501
        :type provider: str
        :param experimental_method: The experimental_method of this ResultTemplate.  # noqa: E501
        :type experimental_method: str
        :param resolution: The resolution of this ResultTemplate.  # noqa: E501
        :type resolution: float
        :param preferred_assembly_id: The preferred_assembly_id of this ResultTemplate.  # noqa: E501
        :type preferred_assembly_id: float
        """
        self.swagger_types = {
            'last_updated': str,
            'provider': str,
            'experimental_method': str,
            'resolution': float,
            'preferred_assembly_id': float
        }

        self.attribute_map = {
            'last_updated': 'last_updated',
            'provider': 'provider',
            'experimental_method': 'experimental_method',
            'resolution': 'resolution',
            'preferred_assembly_id': 'preferred_assembly_id'
        }
        self._last_updated = last_updated
        self._provider = provider
        self._experimental_method = experimental_method
        self._resolution = resolution
        self._preferred_assembly_id = preferred_assembly_id

    @classmethod
    def from_dict(cls, dikt) -> 'ResultTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The result_template of this ResultTemplate.  # noqa: E501
        :rtype: ResultTemplate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_updated(self) -> str:
        """Gets the last_updated of this ResultTemplate.


        :return: The last_updated of this ResultTemplate.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: str):
        """Sets the last_updated of this ResultTemplate.


        :param last_updated: The last_updated of this ResultTemplate.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def provider(self) -> str:
        """Gets the provider of this ResultTemplate.


        :return: The provider of this ResultTemplate.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider: str):
        """Sets the provider of this ResultTemplate.


        :param provider: The provider of this ResultTemplate.
        :type provider: str
        """

        self._provider = provider

    @property
    def experimental_method(self) -> str:
        """Gets the experimental_method of this ResultTemplate.


        :return: The experimental_method of this ResultTemplate.
        :rtype: str
        """
        return self._experimental_method

    @experimental_method.setter
    def experimental_method(self, experimental_method: str):
        """Sets the experimental_method of this ResultTemplate.


        :param experimental_method: The experimental_method of this ResultTemplate.
        :type experimental_method: str
        """

        self._experimental_method = experimental_method

    @property
    def resolution(self) -> float:
        """Gets the resolution of this ResultTemplate.


        :return: The resolution of this ResultTemplate.
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution: float):
        """Sets the resolution of this ResultTemplate.


        :param resolution: The resolution of this ResultTemplate.
        :type resolution: float
        """

        self._resolution = resolution

    @property
    def preferred_assembly_id(self) -> float:
        """Gets the preferred_assembly_id of this ResultTemplate.


        :return: The preferred_assembly_id of this ResultTemplate.
        :rtype: float
        """
        return self._preferred_assembly_id

    @preferred_assembly_id.setter
    def preferred_assembly_id(self, preferred_assembly_id: float):
        """Sets the preferred_assembly_id of this ResultTemplate.


        :param preferred_assembly_id: The preferred_assembly_id of this ResultTemplate.
        :type preferred_assembly_id: float
        """

        self._preferred_assembly_id = preferred_assembly_id
