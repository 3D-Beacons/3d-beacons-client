# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ResultSeqres(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, aligned_sequence: str=None, description: str=None, _from: int=None, to: int=None):  # noqa: E501
        """ResultSeqres - a model defined in Swagger

        :param aligned_sequence: The aligned_sequence of this ResultSeqres.  # noqa: E501
        :type aligned_sequence: str
        :param description: The description of this ResultSeqres.  # noqa: E501
        :type description: str
        :param _from: The _from of this ResultSeqres.  # noqa: E501
        :type _from: int
        :param to: The to of this ResultSeqres.  # noqa: E501
        :type to: int
        """
        self.swagger_types = {
            'aligned_sequence': str,
            'description': str,
            '_from': int,
            'to': int
        }

        self.attribute_map = {
            'aligned_sequence': 'aligned_sequence',
            'description': 'description',
            '_from': 'from',
            'to': 'to'
        }
        self._aligned_sequence = aligned_sequence
        self._description = description
        self.__from = _from
        self._to = to

    @classmethod
    def from_dict(cls, dikt) -> 'ResultSeqres':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The result_seqres of this ResultSeqres.  # noqa: E501
        :rtype: ResultSeqres
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aligned_sequence(self) -> str:
        """Gets the aligned_sequence of this ResultSeqres.


        :return: The aligned_sequence of this ResultSeqres.
        :rtype: str
        """
        return self._aligned_sequence

    @aligned_sequence.setter
    def aligned_sequence(self, aligned_sequence: str):
        """Sets the aligned_sequence of this ResultSeqres.


        :param aligned_sequence: The aligned_sequence of this ResultSeqres.
        :type aligned_sequence: str
        """

        self._aligned_sequence = aligned_sequence

    @property
    def description(self) -> str:
        """Gets the description of this ResultSeqres.


        :return: The description of this ResultSeqres.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ResultSeqres.


        :param description: The description of this ResultSeqres.
        :type description: str
        """

        self._description = description

    @property
    def _from(self) -> int:
        """Gets the _from of this ResultSeqres.


        :return: The _from of this ResultSeqres.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from: int):
        """Sets the _from of this ResultSeqres.


        :param _from: The _from of this ResultSeqres.
        :type _from: int
        """

        self.__from = _from

    @property
    def to(self) -> int:
        """Gets the to of this ResultSeqres.


        :return: The to of this ResultSeqres.
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to: int):
        """Sets the to of this ResultSeqres.


        :param to: The to of this ResultSeqres.
        :type to: int
        """

        self._to = to
