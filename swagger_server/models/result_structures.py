# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.result_chains import ResultChains  # noqa: F401,E501
from swagger_server.models.result_in_complex_with import ResultInComplexWith  # noqa: F401,E501
from swagger_server import util


class ResultStructures(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, created: str=None, identity: float=None, similarity: float=None, oligo_state: str=None, coverage: float=None, qmean_version: str=None, qmean_avg_local_score: float=None, coordinates: str=None, pubmed_ids: List[str]=None, in_complex_with: List[ResultInComplexWith]=None, bound_ligands: List[ResultInComplexWith]=None, chains: List[ResultChains]=None):  # noqa: E501
        """ResultStructures - a model defined in Swagger

        :param created: The created of this ResultStructures.  # noqa: E501
        :type created: str
        :param identity: The identity of this ResultStructures.  # noqa: E501
        :type identity: float
        :param similarity: The similarity of this ResultStructures.  # noqa: E501
        :type similarity: float
        :param oligo_state: The oligo_state of this ResultStructures.  # noqa: E501
        :type oligo_state: str
        :param coverage: The coverage of this ResultStructures.  # noqa: E501
        :type coverage: float
        :param qmean_version: The qmean_version of this ResultStructures.  # noqa: E501
        :type qmean_version: str
        :param qmean_avg_local_score: The qmean_avg_local_score of this ResultStructures.  # noqa: E501
        :type qmean_avg_local_score: float
        :param coordinates: The coordinates of this ResultStructures.  # noqa: E501
        :type coordinates: str
        :param pubmed_ids: The pubmed_ids of this ResultStructures.  # noqa: E501
        :type pubmed_ids: List[str]
        :param in_complex_with: The in_complex_with of this ResultStructures.  # noqa: E501
        :type in_complex_with: List[ResultInComplexWith]
        :param bound_ligands: The bound_ligands of this ResultStructures.  # noqa: E501
        :type bound_ligands: List[ResultInComplexWith]
        :param chains: The chains of this ResultStructures.  # noqa: E501
        :type chains: List[ResultChains]
        """
        self.swagger_types = {
            'created': str,
            'identity': float,
            'similarity': float,
            'oligo_state': str,
            'coverage': float,
            'qmean_version': str,
            'qmean_avg_local_score': float,
            'coordinates': str,
            'pubmed_ids': List[str],
            'in_complex_with': List[ResultInComplexWith],
            'bound_ligands': List[ResultInComplexWith],
            'chains': List[ResultChains]
        }

        self.attribute_map = {
            'created': 'created',
            'identity': 'identity',
            'similarity': 'similarity',
            'oligo_state': 'oligo-state',
            'coverage': 'coverage',
            'qmean_version': 'qmean_version',
            'qmean_avg_local_score': 'qmean_avg_local_score',
            'coordinates': 'coordinates',
            'pubmed_ids': 'pubmed_ids',
            'in_complex_with': 'in_complex_with',
            'bound_ligands': 'bound_ligands',
            'chains': 'chains'
        }
        self._created = created
        self._identity = identity
        self._similarity = similarity
        self._oligo_state = oligo_state
        self._coverage = coverage
        self._qmean_version = qmean_version
        self._qmean_avg_local_score = qmean_avg_local_score
        self._coordinates = coordinates
        self._pubmed_ids = pubmed_ids
        self._in_complex_with = in_complex_with
        self._bound_ligands = bound_ligands
        self._chains = chains

    @classmethod
    def from_dict(cls, dikt) -> 'ResultStructures':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The result_structures of this ResultStructures.  # noqa: E501
        :rtype: ResultStructures
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self) -> str:
        """Gets the created of this ResultStructures.


        :return: The created of this ResultStructures.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created: str):
        """Sets the created of this ResultStructures.


        :param created: The created of this ResultStructures.
        :type created: str
        """

        self._created = created

    @property
    def identity(self) -> float:
        """Gets the identity of this ResultStructures.


        :return: The identity of this ResultStructures.
        :rtype: float
        """
        return self._identity

    @identity.setter
    def identity(self, identity: float):
        """Sets the identity of this ResultStructures.


        :param identity: The identity of this ResultStructures.
        :type identity: float
        """

        self._identity = identity

    @property
    def similarity(self) -> float:
        """Gets the similarity of this ResultStructures.


        :return: The similarity of this ResultStructures.
        :rtype: float
        """
        return self._similarity

    @similarity.setter
    def similarity(self, similarity: float):
        """Sets the similarity of this ResultStructures.


        :param similarity: The similarity of this ResultStructures.
        :type similarity: float
        """

        self._similarity = similarity

    @property
    def oligo_state(self) -> str:
        """Gets the oligo_state of this ResultStructures.


        :return: The oligo_state of this ResultStructures.
        :rtype: str
        """
        return self._oligo_state

    @oligo_state.setter
    def oligo_state(self, oligo_state: str):
        """Sets the oligo_state of this ResultStructures.


        :param oligo_state: The oligo_state of this ResultStructures.
        :type oligo_state: str
        """

        self._oligo_state = oligo_state

    @property
    def coverage(self) -> float:
        """Gets the coverage of this ResultStructures.


        :return: The coverage of this ResultStructures.
        :rtype: float
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage: float):
        """Sets the coverage of this ResultStructures.


        :param coverage: The coverage of this ResultStructures.
        :type coverage: float
        """

        self._coverage = coverage

    @property
    def qmean_version(self) -> str:
        """Gets the qmean_version of this ResultStructures.


        :return: The qmean_version of this ResultStructures.
        :rtype: str
        """
        return self._qmean_version

    @qmean_version.setter
    def qmean_version(self, qmean_version: str):
        """Sets the qmean_version of this ResultStructures.


        :param qmean_version: The qmean_version of this ResultStructures.
        :type qmean_version: str
        """

        self._qmean_version = qmean_version

    @property
    def qmean_avg_local_score(self) -> float:
        """Gets the qmean_avg_local_score of this ResultStructures.


        :return: The qmean_avg_local_score of this ResultStructures.
        :rtype: float
        """
        return self._qmean_avg_local_score

    @qmean_avg_local_score.setter
    def qmean_avg_local_score(self, qmean_avg_local_score: float):
        """Sets the qmean_avg_local_score of this ResultStructures.


        :param qmean_avg_local_score: The qmean_avg_local_score of this ResultStructures.
        :type qmean_avg_local_score: float
        """

        self._qmean_avg_local_score = qmean_avg_local_score

    @property
    def coordinates(self) -> str:
        """Gets the coordinates of this ResultStructures.


        :return: The coordinates of this ResultStructures.
        :rtype: str
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates: str):
        """Sets the coordinates of this ResultStructures.


        :param coordinates: The coordinates of this ResultStructures.
        :type coordinates: str
        """

        self._coordinates = coordinates

    @property
    def pubmed_ids(self) -> List[str]:
        """Gets the pubmed_ids of this ResultStructures.


        :return: The pubmed_ids of this ResultStructures.
        :rtype: List[str]
        """
        return self._pubmed_ids

    @pubmed_ids.setter
    def pubmed_ids(self, pubmed_ids: List[str]):
        """Sets the pubmed_ids of this ResultStructures.


        :param pubmed_ids: The pubmed_ids of this ResultStructures.
        :type pubmed_ids: List[str]
        """

        self._pubmed_ids = pubmed_ids

    @property
    def in_complex_with(self) -> List[ResultInComplexWith]:
        """Gets the in_complex_with of this ResultStructures.


        :return: The in_complex_with of this ResultStructures.
        :rtype: List[ResultInComplexWith]
        """
        return self._in_complex_with

    @in_complex_with.setter
    def in_complex_with(self, in_complex_with: List[ResultInComplexWith]):
        """Sets the in_complex_with of this ResultStructures.


        :param in_complex_with: The in_complex_with of this ResultStructures.
        :type in_complex_with: List[ResultInComplexWith]
        """

        self._in_complex_with = in_complex_with

    @property
    def bound_ligands(self) -> List[ResultInComplexWith]:
        """Gets the bound_ligands of this ResultStructures.


        :return: The bound_ligands of this ResultStructures.
        :rtype: List[ResultInComplexWith]
        """
        return self._bound_ligands

    @bound_ligands.setter
    def bound_ligands(self, bound_ligands: List[ResultInComplexWith]):
        """Sets the bound_ligands of this ResultStructures.


        :param bound_ligands: The bound_ligands of this ResultStructures.
        :type bound_ligands: List[ResultInComplexWith]
        """

        self._bound_ligands = bound_ligands

    @property
    def chains(self) -> List[ResultChains]:
        """Gets the chains of this ResultStructures.


        :return: The chains of this ResultStructures.
        :rtype: List[ResultChains]
        """
        return self._chains

    @chains.setter
    def chains(self, chains: List[ResultChains]):
        """Sets the chains of this ResultStructures.


        :param chains: The chains of this ResultStructures.
        :type chains: List[ResultChains]
        """

        self._chains = chains
